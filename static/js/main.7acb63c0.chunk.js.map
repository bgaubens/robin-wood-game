{"version":3,"sources":["images/robin.jpg","images/compagnon.jpg","images/sheriff.jpg","images/adjoint.jpg","images/embobineur.jpg","images/moine.jpg","images/paysanne.jpg","characters.js","images/sorciere.jpg","images/traitre.jpg","images/robin-wood-back.jpg","utilities.js","components/Board.js","components/Players.js","components/Choices.js","App.js","reportWebVitals.js","index.js"],"names":["characters","Robin","Compagnon","Sheriff","Adjoint","Embobineur","Moine","Paysanne","includes","value","arr","status","i","length","Board","handleClickedCard","activeCard","round","className","map","character","id","clickedCard","onClick","src","image","backimage","Players","activePlayer","players","onChange","name","e","target","life","Choices","onChoiceClick","onAnswerClick","characterChoices","label","key","answers","choice","chosenCharacter","answer","chosenAnswer","App","useState","setActiveCard","shuffle","charactersArray","setCharacters","Math","floor","random","setActivePlayer","player","clickedCharacter","setRound","setPlayers","useEffect","checkWinner","isWitch","resetRound","isNewPlayer","characterPower","num","playersCopy","JSON","parse","stringify","prev","roundCopy","push","firstColor","indexOf","color","secondColor","thirdColor","charactersCopy","firstPosition","secondPosition","firstCharacter","secondCharacter","filter","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7acb63c0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/robin.83aa1f3e.jpg\";","export default __webpack_public_path__ + \"static/media/compagnon.e626d0c4.jpg\";","export default __webpack_public_path__ + \"static/media/sheriff.38b3bcd1.jpg\";","export default __webpack_public_path__ + \"static/media/adjoint.d48cc3c6.jpg\";","export default __webpack_public_path__ + \"static/media/embobineur.dc9601ba.jpg\";","export default __webpack_public_path__ + \"static/media/moine.70c350f7.jpg\";","export default __webpack_public_path__ + \"static/media/paysanne.ff6d01e5.jpg\";","import Robin from './images/robin.jpg';\r\nimport Compagnon from './images/compagnon.jpg';\r\nimport Sheriff from './images/sheriff.jpg';\r\nimport Adjoint from './images/adjoint.jpg';\r\nimport Embobineur from './images/embobineur.jpg';\r\nimport Moine from './images/moine.jpg';\r\nimport Paysanne from './images/paysanne.jpg';\r\nimport Sorciere from './images/sorciere.jpg';\r\nimport Traitre from './images/traitre.jpg';\r\n\r\nlet characters = [\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Robin\",\r\n        \"color\": \"green\",\r\n        \"image\": Robin,\r\n        \"power\": \"Démasquez le Shériff et ses adjoints\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"Compagnon\",\r\n        \"color\": \"green\",\r\n        \"image\": Compagnon,\r\n        \"power\": \"Rejouez\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"name\": \"Compagnon\",\r\n        \"color\": \"green\",\r\n        \"image\": Compagnon,\r\n        \"power\": \"Rejouez\"\r\n    },\r\n    {\r\n        \"id\": 4,\r\n        \"name\": \"Sheriff\",\r\n        \"color\": \"red\",\r\n        \"image\": Sheriff,\r\n        \"power\": \"Démasquez Robin et ses compagnons\"\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"name\": \"Adjoint\",\r\n        \"color\": \"red\",\r\n        \"image\": Adjoint,\r\n        \"power\": \"Mélangez deux cartes\"\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"name\": \"Adjoint\",\r\n        \"color\": \"red\",\r\n        \"image\": Adjoint,\r\n        \"power\": \"Mélangez deux cartes\"\r\n    },\r\n    {\r\n        \"id\": 7,\r\n        \"name\": \"Embobineur\",\r\n        \"color\": \"pink\",\r\n        \"image\": Embobineur,\r\n        \"power\": \"Vous devez mentir\"\r\n    },\r\n    {\r\n        \"id\": 8,\r\n        \"name\": \"Moine\",\r\n        \"color\": \"blue\",\r\n        \"image\": Moine,\r\n        \"power\": \"Retournez une carte\"\r\n    },\r\n    {\r\n        \"id\": 9,\r\n        \"name\": \"Paysanne\",\r\n        \"color\": \"yellow\",\r\n        \"image\": Paysanne,\r\n        \"power\": \"Il ne se passe rien\"\r\n    },\r\n    {\r\n        \"id\": 10,\r\n        \"name\": \"Paysanne\",\r\n        \"color\": \"yellow\",\r\n        \"image\": Paysanne,\r\n        \"power\": \"Il ne se passe rien\"\r\n    },\r\n    {\r\n        \"id\": 11,\r\n        \"name\": \"Sorcière\",\r\n        \"color\": \"purple\",\r\n        \"image\": Sorciere,\r\n        \"power\": \"Prenez une deuxième carte, consultez-la, puis replacez les deux cartes face cachée\"\r\n    },\r\n    {\r\n        \"id\": 12,\r\n        \"name\": \"Traître\",\r\n        \"color\": \"grey\",\r\n        \"image\": Traitre,\r\n        \"power\": \"Vous perdez une vie\"\r\n    },\r\n  ];\r\n\r\nexport default characters;","export default __webpack_public_path__ + \"static/media/sorciere.fd97f35c.jpg\";","export default __webpack_public_path__ + \"static/media/traitre.e847e3de.jpg\";","export default __webpack_public_path__ + \"static/media/robin-wood-back.3c04c64d.jpg\";","export default function includes(value, arr) {\r\n    \r\n    let status = false;\r\n\r\n    for (var i = 0; i < arr.length; i++) {\r\n        var instance = arr[i];\r\n        if (instance === value) {\r\n            status = true;\r\n        }\r\n    }\r\n    \r\n    return status;\r\n}","import React, { useState } from \"react\";\r\nimport characters from \"../characters\";\r\nimport {shuffle} from 'lodash'\r\nimport backimage from \"../images/robin-wood-back.jpg\"\r\nimport includes from \"../utilities\"\r\n\r\nfunction Board( { handleClickedCard, characters, activeCard, round } ) {\r\n\r\n    return (\r\n      <div className=\"board\">\r\n        {characters.map((character) => {\r\n          return (\r\n            <div\r\n              className={\"card-outer \" + (includes(character.id, activeCard) ? \"flipped \" : \"\") + (includes(character.id, round.clickedCard) ? \"clicked \" : \"\")}\r\n              onClick={() => handleClickedCard(character)}\r\n            >\r\n              <div className=\"card\">\r\n                <div className=\"front\">\r\n                  <img className=\"character-img\" src={character.image}></img>\r\n                </div>  \r\n                <div className=\"back\">\r\n                  {/*<h1>{character.name}</h1> \r\n                  <br></br>\r\n                  <p>{character.power}</p>*/}\r\n                  <img className=\"character-img\" src={backimage}></img>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default Board;","import includes from \"../utilities\"\r\n\r\nfunction Players({activePlayer, activeCard, players, onChange, round}) {\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"player one\">\r\n                <div className=\"player-icon\"></div>\r\n                <div className=\"player-info\"> \r\n                    <div className=\"player-name\"> \r\n                        <p>Joueur 1 :</p>\r\n                        <input\r\n                            value={players[0].name}\r\n                            onChange={(e) => onChange(e.target.value, 0)}\r\n                        ></input>\r\n                    </div>\r\n                    <p>Vies : {players[0].life}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"rules\">\r\n                <h1>C'est le tour de {activePlayer ? players[0].name : players[1].name}</h1>\r\n                {(includes(round.clickedCard, activeCard)) ? <h1>Attention ! {!activePlayer ? players[0].name : players[1].name} ne doit pas regarder la carte</h1> : \"\"}\r\n            </div>\r\n            <div className=\"player two\">\r\n                <div className=\"player-info\"> \r\n                    <div className=\"player-name\"> \r\n                        <p>Joueur 2 :</p>\r\n                        <input \r\n                            value={players[1].name}\r\n                            onChange={(e) => onChange(e.target.value, 1)}\r\n                        ></input>\r\n                    </div>\r\n                    <p>Vies : {players[1].life}</p>\r\n                </div>\r\n                <div className=\"player-icon\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n  export default Players;","function Choices( {onChoiceClick, onAnswerClick, activePlayer, round} ) {\r\n    const characterChoices = [\r\n        {\r\n            label: \"Je suis Robin\",\r\n            character: \"Robin\",\r\n            key: 1\r\n        },\r\n        {\r\n            label: \"Je suis un compagnon\",\r\n            character: \"Compagnon\",\r\n            key: 2\r\n        },\r\n        {\r\n            label: \"Je suis le Shériff\",\r\n            character: \"Sheriff\",\r\n            key: 3\r\n        },\r\n        {\r\n            label: \"Je suis un adjoint\",\r\n            character: \"Adjoint\",\r\n            key: 4\r\n        },\r\n        //{\r\n        //    label: \"Je suis l'embobineur\",\r\n        //    character: \"Embobineur\",\r\n        //    key: 5\r\n        //},\r\n        {\r\n            label: \"Je suis le moine\",\r\n            character: \"Moine\",\r\n            key: 6\r\n        },\r\n        {\r\n            label: \"Je suis une paysanne\",\r\n            character: \"Paysanne\",\r\n            key: 7\r\n        },\r\n        {\r\n            label: \"Je suis la sorcière\",\r\n            character: \"Sorciere\",\r\n            key: 8\r\n        },\r\n        {\r\n            label: \"Je passe\",\r\n            character: \"Passe\",\r\n            key: 9\r\n        },\r\n    ]\r\n\r\n    const answers = [\"Je te crois\", \"Je t'accuse\"]\r\n\r\n    return (\r\n        <div className=\"choice-container\">\r\n            <div className=\"choice-buttons player-one\">\r\n                {activePlayer ?\r\n                    <>{characterChoices.map(choice => {\r\n                        return (\r\n                            <button\r\n                                className={\"choice \" + ((round.chosenCharacter === choice.character) ? \"clicked\" : \"\")}\r\n                                onClick={() => onChoiceClick(choice)}>\r\n                                    {choice.label}\r\n                            </button>\r\n                        );\r\n                    })}</>\r\n                    : <>{answers.map(answer => {\r\n                        return (\r\n                            <button\r\n                                className={\"choice \" + ((round.chosenAnswer === answer) ? \"clicked\" : \"\")}\r\n                                onClick={() => onAnswerClick(answer)}>\r\n                                    {answer}\r\n                            </button>\r\n                        );\r\n                    })}</>\r\n                }\r\n            </div>\r\n            <div className=\"choice-buttons player-two\">\r\n                {!activePlayer ?\r\n                    <>{characterChoices.map(choice => {\r\n                        return (\r\n                            <button\r\n                                className={\"choice \" + ((round.chosenCharacter === choice.character) ? \"clicked\" : \"\")}\r\n                                onClick={() => onChoiceClick(choice)}>\r\n                                    {choice.label}\r\n                            </button>\r\n                        );\r\n                    })}</>\r\n                    : <>{answers.map(answer => {\r\n                        return (\r\n                            <button\r\n                                className={\"choice \" + ((round.chosenAnswer === answer) ? \"clicked\" : \"\")}\r\n                                onClick={() => onAnswerClick(answer)}>\r\n                                    {answer}\r\n                            </button>\r\n                        );\r\n                    })}</>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n  export default Choices;","import react, {useState, useEffect} from 'react'; // Importing the React functions\nimport './App.css'; // Importing the stylesheet\nimport Board from './components/Board.js'; // Importing the board component\nimport Players from './components/Players'; // Importing the players component\nimport Choices from './components/Choices'; // Importing the choices component\nimport charactersArray from \"./characters\"; // Importing the characters array\nimport {shuffle} from 'lodash' // Random mix function of an array\nimport includes from \"./utilities\" // Importing utility functions\n\nfunction App() { // Declaration of the App component\n  \n  const [activeCard, setActiveCard] =  useState([]); // Actual returned card\n  const [characters, setCharacters] =  useState(shuffle(charactersArray)); // Intial list of cards\n  const [activePlayer, setActivePlayer] = useState(Math.floor(Math.random()*2) === 1 ? true : false); // Actual player\n  const [round, setRound] = useState({ // Taken decisions for the current round\n    player: activePlayer,\n    clickedCard: [],\n    clickedCharacter: \"\",\n    chosenCharacter: \"\",\n    chosenAnswer: \"\",\n  });\n  const [players, setPlayers] = useState([{ // Players infos\n    name: \"Anne\", life: 2 },\n  { name: \"Bastien\", life: 2\n  }])\n\n  useEffect(() => {\n    checkWinner()\n  }, [players]);\n\n  const isWitch = () => {\n    return (round.chosenCharacter === \"Sorciere\") ? true : false\n  }\n\n  const checkWinner = () => { // Function to check if a player has won the game\n    if (players[0].life === 0) {\n      return (`${players[1].name} a gagné`)\n    }\n    if (players[1].life === 0) {\n      return (`${players[0].name} a gagné`)\n    }\n  }\n\n  const handleClickedCard = (character) => {\n    if (round.clickedCard.length === 0 && !includes(character.id, activeCard) && character.id === 12 && round.chosenCharacter === \"\") {\n      // Trigger the power of the traitor\n      setActiveCard(prev => ([...prev, character.id]));\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.clickedCard = [character.id]\n      roundCopy.clickedCharacter = character.name\n      setRound(roundCopy)\n      let playersCopy = JSON.parse(JSON.stringify(players))\n      playersCopy[activePlayer ? 0 : 1].life = players[activePlayer ? 0 : 1].life - 1\n      setPlayers(playersCopy)\n    \n    } else if (round.chosenCharacter === \"Adjoint\" && !includes(character.id, activeCard)) {\n      // Trigger the power of the adjunct\n      if (round.clickedCard.length === 0) {\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard = [character.id]\n        roundCopy.clickedCharacter = character.name\n        setRound(roundCopy)\n      } else {\n        let charactersCopy = JSON.parse(JSON.stringify(characters))\n        let firstPosition = charactersCopy.map(function(e) { return e.id; }).indexOf(round.clickedCard[0]);\n        let secondPosition = charactersCopy.map(function(e) { return e.id; }).indexOf(character.id);\n        let firstCharacter = charactersCopy[firstPosition]\n        let secondCharacter = charactersCopy[secondPosition]\n        charactersCopy[firstPosition] = secondCharacter\n        charactersCopy[secondPosition] = firstCharacter\n        setCharacters(charactersCopy)\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard = [roundCopy.clickedCard[0], character.id]\n        setRound(roundCopy)\n        resetRound(true)\n      }\n    } else if ((round.chosenCharacter === \"Robin\" || round.chosenCharacter === \"Sheriff\") && !includes(character.id, activeCard)) {\n      // Trigger the power of Robin\n      if (round.clickedCard.length === 0 || round.clickedCard.length === 1) {\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard.push(character.id)\n        roundCopy.clickedCharacter = character.name\n        setRound(roundCopy)\n      } else if (round.clickedCard.length === 2) {\n        let firstColor = characters[characters.map(function(e) { return e.id; }).indexOf(round.clickedCard[0])].color;\n        let secondColor = characters[characters.map(function(e) { return e.id; }).indexOf(round.clickedCard[1])].color;\n        let thirdColor = characters[characters.map(function(e) { return e.id; }).indexOf(character.id)].color;\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard.push(character.id)\n        roundCopy.clickedCharacter = character.name\n        setRound(roundCopy)\n          if(firstColor === secondColor && secondColor === thirdColor) {\n            activeCard.push(round.clickedCard[0], round.clickedCard[1], character.id)\n          } else {\n            let playersCopy = JSON.parse(JSON.stringify(players))\n            playersCopy[activePlayer ? 0 : 1].life = players[activePlayer ? 0 : 1].life - 1\n            setPlayers(playersCopy)\n            resetRound(true)\n          }\n      }\n    } else if (round.clickedCard.length === 0 && !includes(character.id, activeCard)) {\n      // Flip the chosen card if none has already been flipped\n      setActiveCard(prev => ([...prev, character.id]));\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.clickedCard = [character.id]\n      roundCopy.clickedCharacter = character.name\n      setRound(roundCopy) // Set the chosen card if none has already been flipped chosed\n    }\n\n    if (includes(character.id, activeCard) && isWitch() && includes(character.id, round.clickedCard)) {\n      // Flip the card back after the witch power\n      setActiveCard(activeCard.filter(element => element !== character.id));\n      resetRound(true)\n\n    } else if (includes(character.id, activeCard) && character.id === 12) {\n      // Flip the card back after the traitor power\n      setActiveCard(activeCard.filter(element => element !== character.id));\n      resetRound(true)\n\n    } else if (includes(character.id, activeCard) && includes(character.id, round.clickedCard) ) {\n      // Flip the card back if the card is currently flipped\n      setActiveCard(activeCard.filter(element => element !== character.id));\n\n    } else if (!includes(character.id, activeCard) && isWitch() && !includes(round.clickedCard[0], activeCard)) {\n      // Flip the card if the card is currently flipped\n      setActiveCard(prev => ([...prev, character.id]));\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.clickedCard = [character.id]\n      roundCopy.clickedCharacter = character.name\n      setRound(roundCopy) // Trigger the power of the witch\n\n    } else if (round.chosenCharacter === \"Moine\" ) {\n      setActiveCard(prev => ([...prev, character.id]));\n      resetRound(true) // Trigger the power of the monk\n    }\n  };\n\n  const handleClickedChoice = (choice) => {\n    if (choice.character === \"Passe\" && round.chosenCharacter === \"\" && round.clickedCard[0] !== 12) {\n      resetRound(true) // Go to next player if the player skip\n    } else if (choice.character === \"Passe\" && (round.chosenCharacter === \"Robin\" || round.chosenCharacter === \"Sheriff\") && round.chosenAnswer !== \"\") {\n      resetRound(true) // Go to next player if the player is Robin or Sheriff and skip\n    } else if (round.chosenCharacter === \"\" && round.clickedCard.length !== 0 && !includes(round.clickedCard[0], activeCard) ) {\n    // Choose a character if none has already been chosen\n    // there is no active card and a card has already been clicked\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.chosenCharacter = choice.character\n      setRound(roundCopy)\n    }\n  }\n\n  const resetRound = (isNewPlayer) => {\n    setActivePlayer((isNewPlayer) ? !activePlayer : activePlayer)  \n    setRound({ // Function to enable a new round to play\n        player: activePlayer,\n        clickedCard: [],\n        clickedCharacter: \"\",\n        chosenCharacter: \"\",\n        chosenAnswer: \"\",\n      });\n  }\n\n  const handleClickedAnswer = (answer) => {\n    if (round.chosenAnswer === \"\" && round.clickedCard !== [] && round.chosenCharacter !== \"\") {\n    // If an answer is clicked and none has already been selected, answer is add to the round\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.chosenAnswer = answer;\n      if (round.chosenCharacter === \"Adjoint\" || round.chosenCharacter === \"Robin\" || round.chosenCharacter === \"Sheriff\") {\n        roundCopy.clickedCard = []\n      }\n      setRound(roundCopy)\n    }\n\n    if(round.chosenCharacter !== round.clickedCharacter && answer === \"Je t'accuse\") {\n    // If a player lies and is not believed, he loses a life\n      let playersCopy = JSON.parse(JSON.stringify(players))\n      playersCopy[activePlayer ? 0 : 1].life = players[activePlayer ? 0 : 1].life - 1\n      setPlayers(playersCopy)\n      resetRound(true)\n    } else if (round.chosenCharacter === round.clickedCharacter && answer === \"Je t'accuse\") {\n      // If a player tells the truth but is not believed,\n      // it trigger his character's power and the other player loses a life\n        let playersCopy = JSON.parse(JSON.stringify(players))\n        playersCopy[activePlayer ? 1 : 0].life = players[activePlayer ? 1 : 0].life - 1\n        setPlayers(playersCopy)\n        characterPower(round.chosenCharacter)\n    } else if (answer === \"Je te crois\") {\n      // If the active player is believed, it trigger his character's power\n      characterPower(round.chosenCharacter)\n    }\n  }\n\n  const onNameChange = (e, num) => {\n    // Function that enable a player to change his name\n    let playersCopy = JSON.parse(JSON.stringify(players))\n    playersCopy[num].name = e\n    setPlayers(playersCopy)\n  }\n\n  const characterPower = (character) => {\n    // Trigger a character's power\n    switch (character) {\n      case 'Paysanne':\n        resetRound(true)\n        break\n      case 'Compagnon':\n        resetRound(false)\n        break\n      case 'Sheriff':\n      case 'Robin':\n        return\n      default:\n        return\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <Players\n        activePlayer={activePlayer}\n        activeCard={activeCard}\n        players={players}\n        onChange={onNameChange}\n        round={round}\n      />\n      <Board\n        handleClickedCard={handleClickedCard}\n        characters={characters}\n        activeCard={activeCard}\n        round={round}\n      />\n      <Choices\n      onChoiceClick={handleClickedChoice}\n      onAnswerClick={handleClickedAnswer}\n      activePlayer={activePlayer}\n      round={round}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}