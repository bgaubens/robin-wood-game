{"version":3,"sources":["images/robin.jpg","images/compagnon.jpg","images/sheriff.jpg","images/adjoint.jpg","images/embobineur.jpg","images/moine.jpg","images/paysanne.jpg","characters.js","images/sorciere.jpg","images/traitre.jpg","images/robin-wood-back.jpg","utilities.js","components/Board.js","components/Players.js","components/Choices.js","App.js","reportWebVitals.js","index.js"],"names":["characters","Robin","Compagnon","Sheriff","Adjoint","Embobineur","Moine","Paysanne","includes","value","arr","status","i","length","Board","handleClickedCard","activeCard","round","className","map","character","id","clickedCard","onClick","src","image","backimage","Players","activePlayer","players","onChange","onReplayClick","name","e","target","repeat","life","Choices","onChoiceClick","onAnswerClick","label","key","choice","chosenCharacter","answer","chosenAnswer","App","useState","setActiveCard","shuffle","charactersArray","setCharacters","Math","floor","random","setActivePlayer","history","setHistory","player","clickedCharacter","setRound","setPlayers","useEffect","checkWinner","isWitch","handleClickedChoice","resetRound","prev","roundCopy","JSON","parse","stringify","isNewPlayer","handleClickedAnswer","playersCopy","characterPower","num","push","firstColor","indexOf","color","secondColor","thirdColor","charactersCopy","firstPosition","secondPosition","firstCharacter","secondCharacter","filter","element","move","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf0bf081.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/robin.83aa1f3e.jpg\";","export default __webpack_public_path__ + \"static/media/compagnon.e626d0c4.jpg\";","export default __webpack_public_path__ + \"static/media/sheriff.38b3bcd1.jpg\";","export default __webpack_public_path__ + \"static/media/adjoint.d48cc3c6.jpg\";","export default __webpack_public_path__ + \"static/media/embobineur.dc9601ba.jpg\";","export default __webpack_public_path__ + \"static/media/moine.70c350f7.jpg\";","export default __webpack_public_path__ + \"static/media/paysanne.ff6d01e5.jpg\";","import Robin from './images/robin.jpg';\r\nimport Compagnon from './images/compagnon.jpg';\r\nimport Sheriff from './images/sheriff.jpg';\r\nimport Adjoint from './images/adjoint.jpg';\r\nimport Embobineur from './images/embobineur.jpg';\r\nimport Moine from './images/moine.jpg';\r\nimport Paysanne from './images/paysanne.jpg';\r\nimport Sorciere from './images/sorciere.jpg';\r\nimport Traitre from './images/traitre.jpg';\r\n\r\nlet characters = [\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Robin\",\r\n        \"color\": \"green\",\r\n        \"image\": Robin,\r\n        \"power\": \"Démasquez le Shériff et ses adjoints\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"Compagnon\",\r\n        \"color\": \"green\",\r\n        \"image\": Compagnon,\r\n        \"power\": \"Rejouez\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"name\": \"Compagnon\",\r\n        \"color\": \"green\",\r\n        \"image\": Compagnon,\r\n        \"power\": \"Rejouez\"\r\n    },\r\n    {\r\n        \"id\": 4,\r\n        \"name\": \"Sheriff\",\r\n        \"color\": \"red\",\r\n        \"image\": Sheriff,\r\n        \"power\": \"Démasquez Robin et ses compagnons\"\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"name\": \"Adjoint\",\r\n        \"color\": \"red\",\r\n        \"image\": Adjoint,\r\n        \"power\": \"Mélangez deux cartes\"\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"name\": \"Adjoint\",\r\n        \"color\": \"red\",\r\n        \"image\": Adjoint,\r\n        \"power\": \"Mélangez deux cartes\"\r\n    },\r\n    {\r\n        \"id\": 7,\r\n        \"name\": \"Embobineur\",\r\n        \"color\": \"pink\",\r\n        \"image\": Embobineur,\r\n        \"power\": \"Vous devez mentir\"\r\n    },\r\n    {\r\n        \"id\": 8,\r\n        \"name\": \"Moine\",\r\n        \"color\": \"blue\",\r\n        \"image\": Moine,\r\n        \"power\": \"Retournez une carte\"\r\n    },\r\n    {\r\n        \"id\": 9,\r\n        \"name\": \"Paysanne\",\r\n        \"color\": \"yellow\",\r\n        \"image\": Paysanne,\r\n        \"power\": \"Il ne se passe rien\"\r\n    },\r\n    {\r\n        \"id\": 10,\r\n        \"name\": \"Paysanne\",\r\n        \"color\": \"yellow\",\r\n        \"image\": Paysanne,\r\n        \"power\": \"Il ne se passe rien\"\r\n    },\r\n    {\r\n        \"id\": 11,\r\n        \"name\": \"Sorcière\",\r\n        \"color\": \"purple\",\r\n        \"image\": Sorciere,\r\n        \"power\": \"Prenez une deuxième carte, consultez-la, puis replacez les deux cartes face cachée\"\r\n    },\r\n    {\r\n        \"id\": 12,\r\n        \"name\": \"Traître\",\r\n        \"color\": \"grey\",\r\n        \"image\": Traitre,\r\n        \"power\": \"Vous perdez une vie\"\r\n    },\r\n  ];\r\n\r\nexport default characters;","export default __webpack_public_path__ + \"static/media/sorciere.fd97f35c.jpg\";","export default __webpack_public_path__ + \"static/media/traitre.e847e3de.jpg\";","export default __webpack_public_path__ + \"static/media/robin-wood-back.3c04c64d.jpg\";","export default function includes(value, arr) {\r\n    \r\n    let status = false;\r\n\r\n    for (var i = 0; i < arr.length; i++) {\r\n        var instance = arr[i];\r\n        if (instance === value) {\r\n            status = true;\r\n        }\r\n    }\r\n    \r\n    return status;\r\n}","import React, { useState } from \"react\";\r\nimport characters from \"../characters\";\r\nimport {shuffle} from 'lodash'\r\nimport backimage from \"../images/robin-wood-back.jpg\"\r\nimport includes from \"../utilities\"\r\n\r\nfunction Board( { handleClickedCard, characters, activeCard, round } ) {\r\n\r\n    return (\r\n      <div className=\"board\">\r\n        {characters.map((character) => {\r\n          return (\r\n            <div\r\n              className={\"card-outer \" + (includes(character.id, activeCard) ? \"flipped \" : \"\") + (includes(character.id, round.clickedCard) ? \"clicked \" : \"\")}\r\n              onClick={() => handleClickedCard(character)}\r\n            >\r\n              <div className=\"card\">\r\n                <div className=\"front\">\r\n                  <img className=\"character-img\" src={character.image}></img>\r\n                </div>  \r\n                <div className=\"back\">\r\n                  {/*<h1>{character.name}</h1> \r\n                  <br></br>\r\n                  <p>{character.power}</p>*/}\r\n                  <img className=\"character-img\" src={backimage}></img>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default Board;","import includes from \"../utilities\"\r\n\r\nfunction Players({activePlayer, activeCard, players, onChange, round, onReplayClick}) {\r\n    const heart = \"❤️\"\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"player one\">\r\n                <div className=\"player-icon\"></div>\r\n                <div className=\"player-info\"> \r\n                    <div className=\"player-name\"> \r\n                        <input\r\n                            value={players[0].name}\r\n                            onChange={(e) => onChange(e.target.value, 0)}\r\n                        ></input>\r\n                    </div>\r\n                    <div className=\"player-lifes\"> \r\n                        <p>{heart.repeat(players[0].life)}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"rules\">\r\n                <button\r\n                    onClick={onReplayClick}\r\n                >Rejouer</button>\r\n                <h1>C'est le tour de {activePlayer ? players[0].name : players[1].name}</h1>\r\n                {(includes(round.clickedCard, activeCard)) ? <h1>Attention ! {!activePlayer ? players[0].name : players[1].name} ne doit pas regarder la carte</h1> : \"\"}\r\n            </div>\r\n            <div className=\"player two\">\r\n                <div className=\"player-info\"> \r\n                    <div className=\"player-name\"> \r\n                        <input \r\n                            value={players[1].name}\r\n                            onChange={(e) => onChange(e.target.value, 1)}\r\n                        ></input>\r\n                    </div>\r\n                    <div className=\"player-lifes\"> \r\n                    <p>{heart.repeat(players[1].life)}</p>\r\n                    </div> \r\n                </div>\r\n                <div className=\"player-icon\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n  export default Players;","function Choices( {onChoiceClick, onAnswerClick, activePlayer, round} ) {\r\n    const characterChoices = [\r\n        {\r\n            label: \"Je suis Robin\",\r\n            character: \"Robin\",\r\n            key: 1\r\n        },\r\n        {\r\n            label: \"Je suis un compagnon\",\r\n            character: \"Compagnon\",\r\n            key: 2\r\n        },\r\n        {\r\n            label: \"Je suis le Shériff\",\r\n            character: \"Sheriff\",\r\n            key: 3\r\n        },\r\n        {\r\n            label: \"Je suis un adjoint\",\r\n            character: \"Adjoint\",\r\n            key: 4\r\n        },\r\n        //{\r\n        //    label: \"Je suis l'embobineur\",\r\n        //    character: \"Embobineur\",\r\n        //    key: 5\r\n        //},\r\n        {\r\n            label: \"Je suis le moine\",\r\n            character: \"Moine\",\r\n            key: 6\r\n        },\r\n        {\r\n            label: \"Je suis une paysanne\",\r\n            character: \"Paysanne\",\r\n            key: 7\r\n        },\r\n        {\r\n            label: \"Je suis la sorcière\",\r\n            character: \"Sorciere\",\r\n            key: 8\r\n        },\r\n        {\r\n            label: \"Je passe\",\r\n            character: \"Passe\",\r\n            key: 9\r\n        },\r\n    ]\r\n\r\n    const answers = [\"Je te crois\", \"Je t'accuse\"]\r\n\r\n    return (\r\n        <div className=\"choice-container\">\r\n            <div className=\"choice-buttons\">\r\n                {activePlayer ?\r\n                    <>{characterChoices.map(choice => {\r\n                        return (\r\n                            <button\r\n                                className={\"choice \" + ((round.chosenCharacter === choice.character) ? \"clicked\" : \"\")}\r\n                                onClick={() => onChoiceClick(choice)}>\r\n                                    {choice.label}\r\n                            </button>\r\n                        );\r\n                    })}</>\r\n                    : <>{answers.map(answer => {\r\n                        return (\r\n                            <button\r\n                                className={\"choice \" + ((round.chosenAnswer === answer) ? \"clicked\" : \"\")}\r\n                                onClick={() => onAnswerClick(answer)}>\r\n                                    {answer}\r\n                            </button>\r\n                        );\r\n                    })}</>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n  export default Choices;","import react, {useState, useEffect} from 'react'; // Importing the React functions\nimport './App.css'; // Importing the stylesheet\nimport Board from './components/Board.js'; // Importing the board component\nimport Players from './components/Players'; // Importing the players component\nimport Choices from './components/Choices'; // Importing the choices component\nimport charactersArray from \"./characters\"; // Importing the characters array\nimport {shuffle} from 'lodash' // Random mix function of an array\nimport includes from \"./utilities\" // Importing utility functions\n\nfunction App() { // Declaration of the App component\n  \n  const [activeCard, setActiveCard] =  useState([]); // Actual returned card\n  const [characters, setCharacters] =  useState(shuffle(charactersArray)); // Intial list of cards\n  const [activePlayer, setActivePlayer] = useState(Math.floor(Math.random()*2) === 1 ? true : false); // Actual player\n  const [history, setHistory] = useState([])\n  const [round, setRound] = useState({ // Taken decisions for the current round\n    player: activePlayer,\n    clickedCard: [],\n    clickedCharacter: \"\",\n    chosenCharacter: \"\",\n    chosenAnswer: \"\",\n  });\n  const [players, setPlayers] = useState([{ // Players infos\n    name: \"Anne\", life: 2 },\n  { name: \"Bastien\", life: 2\n  }])\n\n  useEffect(() => {\n    checkWinner()\n  }, [players]);\n\n  const isWitch = () => {\n    return (round.chosenCharacter === \"Sorciere\") ? true : false\n  }\n\n  const checkWinner = () => { // Function to check if a player has won the game\n    if (players[0].life === 0) {\n      return (`${players[1].name} a gagné`)\n    }\n    if (players[1].life === 0) {\n      return (`${players[0].name} a gagné`)\n    }\n  }\n\n  const handleClickedCard = (character) => {\n    if (round.clickedCard.length === 0 && !includes(character.id, activeCard) && character.id === 12 && round.chosenCharacter === \"\") {\n      // Trigger the power of the traitor\n      setActiveCard(prev => ([...prev, character.id]));\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.clickedCard = [character.id]\n      roundCopy.clickedCharacter = character.name\n      setRound(roundCopy)\n      let playersCopy = JSON.parse(JSON.stringify(players))\n      playersCopy[activePlayer ? 0 : 1].life = players[activePlayer ? 0 : 1].life - 1\n      setPlayers(playersCopy)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a perdu une vie à cause du traitre\"]));\n    } else if (round.chosenCharacter === \"Adjoint\" && !includes(character.id, activeCard)) {\n      // Trigger the power of the adjunct\n      if (round.clickedCard.length === 0) {\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard = [character.id]\n        roundCopy.clickedCharacter = character.name\n        setRound(roundCopy)\n      } else {\n        let charactersCopy = JSON.parse(JSON.stringify(characters))\n        let firstPosition = charactersCopy.map(function(e) { return e.id; }).indexOf(round.clickedCard[0]);\n        let secondPosition = charactersCopy.map(function(e) { return e.id; }).indexOf(character.id);\n        let firstCharacter = charactersCopy[firstPosition]\n        let secondCharacter = charactersCopy[secondPosition]\n        charactersCopy[firstPosition] = secondCharacter\n        charactersCopy[secondPosition] = firstCharacter\n        setCharacters(charactersCopy)\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard = [roundCopy.clickedCard[0], character.id]\n        setRound(roundCopy)\n        resetRound(true)\n        setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a échangé deux cartes\"]));\n      }\n    } else if ((round.chosenCharacter === \"Robin\" || round.chosenCharacter === \"Sheriff\")) {\n      // Trigger the power of Robin\n      if (round.clickedCard.length === 0 || round.clickedCard.length === 1) {\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard.push(character.id)\n        roundCopy.clickedCharacter = character.name\n        setRound(roundCopy)\n      } else if (round.clickedCard.length === 2) {\n        let firstColor = characters[characters.map(function(e) { return e.id; }).indexOf(round.clickedCard[0])].color;\n        let secondColor = characters[characters.map(function(e) { return e.id; }).indexOf(round.clickedCard[1])].color;\n        let thirdColor = characters[characters.map(function(e) { return e.id; }).indexOf(character.id)].color;\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard.push(character.id)\n        roundCopy.clickedCharacter = character.name\n        setRound(roundCopy)\n          if(firstColor === secondColor && secondColor === thirdColor) {\n            activeCard.push(round.clickedCard[0], round.clickedCard[1], character.id)\n            setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a réussi à démasquer \" + (round.chosenCharacter === \"Robin\" ? \"le Shériff et ses adjoints\" : \"Robin et ses compagnons\")]));\n          } else {\n            let playersCopy = JSON.parse(JSON.stringify(players))\n            playersCopy[activePlayer ? 0 : 1].life = players[activePlayer ? 0 : 1].life - 1\n            setPlayers(playersCopy)\n            resetRound(true)\n            setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" n'a pas réussi à démasquer \" +\n            (round.chosenCharacter === \"Robin\" ? \"le Shériff et ses adjoints\" : \"Robin et ses compagnons\") + \" et a perdu une vie\"]));\n          }\n      }\n    } else if (round.clickedCard.length === 0 && !includes(character.id, activeCard)) {\n      // Flip the chosen card if none has already been flipped\n      setActiveCard(prev => ([...prev, character.id]));\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.clickedCard = [character.id]\n      roundCopy.clickedCharacter = character.name\n      setRound(roundCopy) // Set the chosen card if none has already been flipped chosed\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a retourné une carte\"]));\n    }\n\n    if (includes(character.id, activeCard) && isWitch() && includes(character.id, round.clickedCard)) {\n      // Flip the card back after the witch power\n      setActiveCard(activeCard.filter(element => element !== character.id));\n      resetRound(true)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a remis une carte face cachée\"]));\n\n    } else if (includes(character.id, activeCard) && character.id === 12) {\n      // Flip the card back after the traitor power\n      setActiveCard(activeCard.filter(element => element !== character.id));\n      resetRound(true)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a remis une carte face cachée\"]));\n\n    } else if (includes(character.id, activeCard) && includes(character.id, round.clickedCard) ) {\n      // Flip the card back if the card is currently flipped\n      setActiveCard(activeCard.filter(element => element !== character.id));\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a remis une carte face cachée\"]));\n\n    } else if (!includes(character.id, activeCard) && isWitch() && !includes(round.clickedCard[0], activeCard)) {\n      setActiveCard(prev => ([...prev, character.id]));\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.clickedCard = [character.id]\n      roundCopy.clickedCharacter = character.name\n      setRound(roundCopy) // Trigger the power of the witch\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a retourné une carte grâce à la sorcière\"]));\n\n    } else if (round.chosenCharacter === \"Moine\" ) {\n      setActiveCard(prev => ([...prev, character.id]));\n      resetRound(true) // Trigger the power of the monk\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a retourné une carte grâce au moine\"]));\n    }\n  };\n\n  const handleClickedChoice = (choice) => {\n    if (choice.character === \"Passe\" && round.chosenCharacter === \"\" && round.clickedCard[0] !== 12) {\n      resetRound(true) // Go to next player if the player skip\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a passé son tour\"]));\n    } else if (choice.character === \"Passe\" && (round.chosenCharacter === \"Robin\" || round.chosenCharacter === \"Sheriff\") && round.chosenAnswer !== \"\") {\n      resetRound(true) // Go to next player if the player is Robin or Sheriff and skip\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a a passé son tour\"]));\n    } else if (round.chosenCharacter === \"\" && round.clickedCard.length !== 0 && !includes(round.clickedCard[0], activeCard) ) {\n    // Choose a character if none has already been chosen\n    // there is no active card and a card has already been clicked\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.chosenCharacter = choice.character\n      setRound(roundCopy)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" est \" + choice.character]));\n    }\n  }\n\n  const resetRound = (isNewPlayer) => {\n    setActivePlayer((isNewPlayer) ? !activePlayer : activePlayer)  \n    setRound({ // Function to enable a new round to play\n        player: activePlayer,\n        clickedCard: [],\n        clickedCharacter: \"\",\n        chosenCharacter: \"\",\n        chosenAnswer: \"\",\n      });\n  }\n\n  const handleClickedAnswer = (answer) => {\n    if (round.chosenAnswer === \"\" && round.clickedCard !== [] && round.chosenCharacter !== \"\") {\n    // If an answer is clicked and none has already been selected, answer is add to the round\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.chosenAnswer = answer;\n      if (round.chosenCharacter === \"Adjoint\" || round.chosenCharacter === \"Robin\" || round.chosenCharacter === \"Sheriff\") {\n        roundCopy.clickedCard = []\n      }\n      setRound(roundCopy)\n      setHistory(prev => ([...prev, players[(!activePlayer ? 0 : 1)].name + \" répond : \" + answer]));\n    }\n\n    if(round.chosenCharacter !== round.clickedCharacter && answer === \"Je t'accuse\") {\n    // If a player lies and is not believed, he loses a life\n      let playersCopy = JSON.parse(JSON.stringify(players))\n      playersCopy[activePlayer ? 0 : 1].life = players[activePlayer ? 0 : 1].life - 1\n      setPlayers(playersCopy)\n      resetRound(true)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" perd une vie\"]));\n    } else if (round.chosenCharacter === round.clickedCharacter && answer === \"Je t'accuse\") {\n      // If a player tells the truth but is not believed,\n      // it trigger his character's power and the other player loses a life\n        let playersCopy = JSON.parse(JSON.stringify(players))\n        playersCopy[activePlayer ? 1 : 0].life = players[activePlayer ? 1 : 0].life - 1\n        setPlayers(playersCopy)\n        characterPower(round.chosenCharacter)\n        setHistory(prev => ([...prev, players[(!activePlayer ? 0 : 1)].name + \" perd une vie\"]));\n    } else if (answer === \"Je te crois\") {\n      // If the active player is believed, it trigger his character's power\n      characterPower(round.chosenCharacter)\n    }\n  }\n\n  const onNameChange = (e, num) => {\n    // Function that enable a player to change his name\n    let playersCopy = JSON.parse(JSON.stringify(players))\n    playersCopy[num].name = e\n    setPlayers(playersCopy)\n  }\n\n  const onReplayClick = () => {\n    setActiveCard([]);\n    setCharacters(shuffle(charactersArray));\n    setActivePlayer(Math.floor(Math.random()*2) === 1 ? true : false);\n    setHistory([])\n    setRound({\n      player: activePlayer,\n      clickedCard: [],\n      clickedCharacter: \"\",\n      chosenCharacter: \"\",\n      chosenAnswer: \"\",\n    });\n    setPlayers([{\n      name: players[0].name, life: 2 },\n    { name: players[1].name, life: 2\n    }])\n  }\n\n  const characterPower = (character) => {\n    // Trigger a character's power\n    switch (character) {\n      case 'Paysanne':\n        resetRound(true)\n        break\n      case 'Compagnon':\n        resetRound(false)\n        break\n      case 'Sheriff':\n      case 'Robin':\n        return\n      default:\n        return\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <Players\n        activePlayer={activePlayer}\n        activeCard={activeCard}\n        players={players}\n        onChange={onNameChange}\n        round={round}\n        onReplayClick={onReplayClick}\n      />\n      <Choices\n      onChoiceClick={handleClickedChoice}\n      onAnswerClick={handleClickedAnswer}\n      activePlayer={activePlayer}\n      round={round}\n      />\n      <Board\n        handleClickedCard={handleClickedCard}\n        characters={characters}\n        activeCard={activeCard}\n        round={round}\n      />\n      <Choices\n      onChoiceClick={handleClickedChoice}\n      onAnswerClick={handleClickedAnswer}\n      activePlayer={!activePlayer}\n      round={round}\n      />\n      <p className=\"history\">Historique :{history.map(move => {\n          return (\n            <p>{move}</p>\n          );\n      })}</p>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}