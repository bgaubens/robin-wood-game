{"version":3,"sources":["images/robin.jpg","images/compagnon.jpg","images/sheriff.jpg","images/adjoint.jpg","images/embobineur.jpg","images/moine.jpg","images/paysanne.jpg","characters.js","images/sorciere.jpg","images/traitre.jpg","images/robin-wood-back.jpg","utilities.js","components/Board.js","components/Players.js","components/Choices.js","images/history.png","images/book.png","images/replay.png","images/list.png","components/Menu.js","images/cross.png","components/Popup.js","powers.js","App.js","rules.js","reportWebVitals.js","index.js"],"names":["characters","Robin","Compagnon","Sheriff","Adjoint","Embobineur","Moine","Paysanne","includes","value","arr","status","i","length","Board","handleClickedCard","activeCard","round","activePlayer","className","map","character","id","clickedCard","onClick","src","image","backimage","Players","players","player","onChange","onMenuClick","name","e","target","repeat","life","Choices","onChoiceClick","onAnswerClick","label","choice","chosenCharacter","answer","chosenAnswer","Menu","hideMenu","onRulesClick","onReplayClick","onHistoryClick","onPowersClick","Book","alt","History","List","Replay","Popup","popupStates","onCrossClick","onButtonClick","hidePopup","Cross","popupMessage","hideButton","buttonMessage","powers","App","useState","setActiveCard","shuffle","charactersArray","setCharacters","Math","floor","random","setActivePlayer","history","setHistory","setHideMenu","clickedCharacter","setRound","setPlayers","setPopupStates","useEffect","popupCopy","JSON","parse","stringify","handleClickedChoice","roundCopy","prev","resetRound","isNewPlayer","handleClickedAnswer","playersCopy","characterPower","onNameChange","num","join","push","firstColor","indexOf","color","secondColor","thirdColor","charactersCopy","firstPosition","secondPosition","firstCharacter","secondCharacter","filter","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.baebab78.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/robin.83aa1f3e.jpg\";","export default __webpack_public_path__ + \"static/media/compagnon.e626d0c4.jpg\";","export default __webpack_public_path__ + \"static/media/sheriff.38b3bcd1.jpg\";","export default __webpack_public_path__ + \"static/media/adjoint.d48cc3c6.jpg\";","export default __webpack_public_path__ + \"static/media/embobineur.dc9601ba.jpg\";","export default __webpack_public_path__ + \"static/media/moine.70c350f7.jpg\";","export default __webpack_public_path__ + \"static/media/paysanne.ff6d01e5.jpg\";","import Robin from './images/robin.jpg';\r\nimport Compagnon from './images/compagnon.jpg';\r\nimport Sheriff from './images/sheriff.jpg';\r\nimport Adjoint from './images/adjoint.jpg';\r\nimport Embobineur from './images/embobineur.jpg';\r\nimport Moine from './images/moine.jpg';\r\nimport Paysanne from './images/paysanne.jpg';\r\nimport Sorciere from './images/sorciere.jpg';\r\nimport Traitre from './images/traitre.jpg';\r\n\r\nlet characters = [\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Robin\",\r\n        \"color\": \"green\",\r\n        \"image\": Robin,\r\n        \"power\": \"Démasquez le Shériff et ses adjoints\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"Compagnon\",\r\n        \"color\": \"green\",\r\n        \"image\": Compagnon,\r\n        \"power\": \"Rejouez\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"name\": \"Compagnon\",\r\n        \"color\": \"green\",\r\n        \"image\": Compagnon,\r\n        \"power\": \"Rejouez\"\r\n    },\r\n    {\r\n        \"id\": 4,\r\n        \"name\": \"Sheriff\",\r\n        \"color\": \"red\",\r\n        \"image\": Sheriff,\r\n        \"power\": \"Démasquez Robin et ses compagnons\"\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"name\": \"Adjoint\",\r\n        \"color\": \"red\",\r\n        \"image\": Adjoint,\r\n        \"power\": \"Mélangez deux cartes\"\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"name\": \"Adjoint\",\r\n        \"color\": \"red\",\r\n        \"image\": Adjoint,\r\n        \"power\": \"Mélangez deux cartes\"\r\n    },\r\n    {\r\n        \"id\": 7,\r\n        \"name\": \"Embobineur\",\r\n        \"color\": \"pink\",\r\n        \"image\": Embobineur,\r\n        \"power\": \"Vous devez mentir\"\r\n    },\r\n    {\r\n        \"id\": 8,\r\n        \"name\": \"Moine\",\r\n        \"color\": \"blue\",\r\n        \"image\": Moine,\r\n        \"power\": \"Retournez une carte\"\r\n    },\r\n    {\r\n        \"id\": 9,\r\n        \"name\": \"Paysanne\",\r\n        \"color\": \"yellow\",\r\n        \"image\": Paysanne,\r\n        \"power\": \"Il ne se passe rien\"\r\n    },\r\n    {\r\n        \"id\": 10,\r\n        \"name\": \"Paysanne\",\r\n        \"color\": \"yellow\",\r\n        \"image\": Paysanne,\r\n        \"power\": \"Il ne se passe rien\"\r\n    },\r\n    {\r\n        \"id\": 11,\r\n        \"name\": \"Sorcière\",\r\n        \"color\": \"purple\",\r\n        \"image\": Sorciere,\r\n        \"power\": \"Prenez une deuxième carte, consultez-la, puis replacez les deux cartes face cachée\"\r\n    },\r\n    {\r\n        \"id\": 12,\r\n        \"name\": \"Traître\",\r\n        \"color\": \"grey\",\r\n        \"image\": Traitre,\r\n        \"power\": \"Vous perdez une vie\"\r\n    },\r\n  ];\r\n\r\nexport default characters;","export default __webpack_public_path__ + \"static/media/sorciere.fd97f35c.jpg\";","export default __webpack_public_path__ + \"static/media/traitre.e847e3de.jpg\";","export default __webpack_public_path__ + \"static/media/robin-wood-back.cd6242ba.jpg\";","export default function includes(value, arr) {\r\n    \r\n    let status = false;\r\n\r\n    for (var i = 0; i < arr.length; i++) {\r\n        var instance = arr[i];\r\n        if (instance === value) {\r\n            status = true;\r\n        }\r\n    }\r\n    \r\n    return status;\r\n}","import React, { useState } from \"react\";\r\nimport characters from \"../characters\";\r\nimport {shuffle} from 'lodash'\r\nimport backimage from \"../images/robin-wood-back.jpg\"\r\nimport includes from \"../utilities\"\r\n\r\nfunction Board( { handleClickedCard, characters, activeCard, round, activePlayer } ) {\r\n\r\n    return (\r\n      <div className=\"board\">\r\n        {characters.map((character) => {\r\n          return (\r\n            <div\r\n              className={\"card-outer \" + (includes(character.id, activeCard) ? \"flipped \" : \"\") + (includes(character.id, round.clickedCard) ? \"clicked \" : \"\") + (activePlayer ? \"one\" : \"\")}\r\n              onClick={() => handleClickedCard(character)}\r\n            >\r\n              <div className=\"card\">\r\n                <div className=\"front\">\r\n                  <img className=\"character-img\" src={character.image}></img>\r\n                </div>  \r\n                <div className=\"back\">\r\n                  {/*<h1>{character.name}</h1> \r\n                  <br></br>\r\n                  <p>{character.power}</p>*/}\r\n                  <img className=\"character-img\" src={backimage}></img>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default Board;","function Players({players, player, onChange, onMenuClick}) {\r\n    const heart = \"❤️\"\r\n\r\n    return (\r\n        <div className={`player ${player ? \"one\" : \"two\"}`}>\r\n            <div className=\"player-icon\"></div> \r\n            <input\r\n                value={players[(player ? 0 : 1)].name}\r\n                onChange={(e) => onChange(e.target.value, (player ? 0 : 1))}\r\n            ></input>\r\n            <div className=\"player-lifes\">{heart.repeat(players[(player ? 0 : 1)].life)}</div>\r\n            <div className=\"menu\" onClick={onMenuClick}>\r\n                <div className=\"bar\"></div>\r\n                <div className=\"bar\"></div>\r\n                <div className=\"bar\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n  export default Players;","function Choices( {onChoiceClick, onAnswerClick, activePlayer, round, player} ) {\r\n\r\n    const characterChoices = [\r\n        {label: \"Je suis Robin\", character: \"Robin\"},\r\n        {label: \"Je suis un compagnon\", character: \"Compagnon\"},\r\n        {label: \"Je suis le Shériff\", character: \"Sheriff\"},\r\n        {label: \"Je suis un adjoint\", character: \"Adjoint\"},\r\n        {label: \"Je suis le moine\", character: \"Moine\"},\r\n        {label: \"Je suis une paysanne\", character: \"Paysanne\"},\r\n        {label: \"Je suis la sorcière\", character: \"Sorciere\"},\r\n        {label: \"Je passe\", character: \"Passe\"},\r\n    ]\r\n\r\n    const answers = [\"Je te crois\", \"Je t'accuse\"]\r\n\r\n    return (\r\n        <div className={\"choice-container \" + (player ? \"one\" : \"two\")}>\r\n            <div className=\"choice-buttons\">\r\n                {activePlayer ?\r\n                    <>{characterChoices.map(choice => {\r\n                        return (\r\n                            <button\r\n                                className={\"choice \" + ((round.chosenCharacter === choice.character) ? \"clicked\" : \"\")}\r\n                                onClick={() => onChoiceClick(choice)}>\r\n                                    {choice.label}\r\n                            </button>\r\n                        );\r\n                    })}</>\r\n                    : <>{answers.map(answer => {\r\n                        return (\r\n                            <button\r\n                                className={\"choice \" + ((round.chosenAnswer === answer) ? \"clicked\" : \"\")}\r\n                                onClick={() => onAnswerClick(answer)}>\r\n                                    {answer}\r\n                            </button>\r\n                        );\r\n                    })}</>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Choices;","export default __webpack_public_path__ + \"static/media/history.f1dcf3d6.png\";","export default __webpack_public_path__ + \"static/media/book.aeda2440.png\";","export default __webpack_public_path__ + \"static/media/replay.ab81de1c.png\";","export default __webpack_public_path__ + \"static/media/list.82dd8862.png\";","import History from '../images/history.png';\r\nimport Book from '../images/book.png';\r\nimport Replay from '../images/replay.png';\r\nimport List from '../images/list.png';\r\n\r\nfunction Menu ({hideMenu, onMenuClick, onRulesClick, onReplayClick, onHistoryClick, onPowersClick}) {\r\n\r\n    return (\r\n        <div className={\"menu-overlay \" + (hideMenu ? \"hidden\" : \"\")} onClick={onMenuClick}>\r\n            <div className=\"main-menu\">\r\n                <div className=\"menu-section rules\" onClick={onRulesClick}>\r\n                    <img src={Book} alt=\"book\"></img>\r\n                    <div className=\"title\">Règles</div>\r\n                </div>\r\n                <div className=\"menu-section history\" onClick={onHistoryClick}>\r\n                    <img src={History} alt=\"history\"></img>\r\n                    <div className=\"title\">Historique</div>\r\n                </div>\r\n                <div className=\"menu-section powers\" onClick={onPowersClick}>\r\n                    <img src={List} alt=\"list\"></img>\r\n                    <div className=\"title\">Pouvoirs</div>\r\n                </div>\r\n                <div className=\"menu-section replay\" onClick={onReplayClick}>\r\n                    <img src={Replay} alt=\"replay\"></img>\r\n                    <div className=\"title\">Rejouer</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;","export default __webpack_public_path__ + \"static/media/cross.37c068e7.png\";","import Cross from \"../images/cross.png\"\r\n\r\nfunction Popup ({popupStates, onCrossClick, onButtonClick}) {\r\n\r\n    return (\r\n        <div className={\"popup \" + (popupStates.hidePopup ? \"hidden\" : \"\")}>\r\n            <img src={Cross} onClick={onCrossClick}/>\r\n            <div className=\"info-container\">\r\n                <p>{popupStates.popupMessage}</p>\r\n                <button className={popupStates.hideButton ? \"hidden\" : \"\"} onClick={onButtonClick}>{popupStates.buttonMessage}</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Popup;","let powers = [\r\n    \"Robin : Démasquez le Shériff et ses adjoints ou passez votre tour\",\r\n    \"Compagnon : Rejouez\",\r\n    \"Le Shérif : Démasquez Robin et ses compagnons ou passez votre tour\",\r\n    \"Adjoint : Echangez deux cartes de place\",\r\n    \"Embobineur : Mentez obligatoirement\",\r\n    \"Moine : Placez une carte face visible jusqu'à la fin de la partie\",\r\n    \"Paysanne : Il ne se passe rien\",\r\n    \"Sorcière : Consultez une carte puis reposez là\",\r\n    \"Traître : Vous perdez une vie\"\r\n]\r\n\r\nexport default powers;","import react, {useState, useEffect} from 'react'; // Importing the React functions\nimport './App.css'; // Importing the stylesheet\nimport Board from './components/Board'; // Importing the board component\nimport Players from './components/Players'; // Importing the players component\nimport Choices from './components/Choices'; // Importing the choices component\nimport Menu from './components/Menu'; // Importing the menu component\nimport Popup from './components/Popup'; // Importing the popup component\nimport charactersArray from \"./characters\"; // Importing the characters array\nimport {shuffle} from 'lodash' // Random mix function of an array\nimport includes from \"./utilities\" // Importing utility functions\nimport rules from './rules' // Importing the game's rules\nimport powers from './powers' // Importing the characters' powers\n\nfunction App() { // Declaration of the App component\n  \n  const [activeCard, setActiveCard] =  useState([]); // Actual visible cards\n  const [characters, setCharacters] =  useState(shuffle(charactersArray)); // Intial list of cards randomly mixed\n  const [activePlayer, setActivePlayer] = useState(Math.floor(Math.random()*2) === 1 ? true : false); // Actual player\n  const [history, setHistory] = useState([]) // List of all movements for the current round\n  const [hideMenu, setHideMenu] =  useState(true); // Initial visibility of the menu\n  const [round, setRound] = useState({ // Taken decisions for the current round\n    player: activePlayer,\n    clickedCard: [],\n    clickedCharacter: \"\",\n    chosenCharacter: \"\",\n    chosenAnswer: \"\",\n  });\n  const [players, setPlayers] = useState([{ // Players infos\n    name: \"Joueur 1\", life: 2 },\n  { name: \"Joueur 2\", life: 2\n  }])\n  const [popupStates, setPopupStates] = useState({ // Popup infos\n    popupMessage: `Bienvenue compagnon ! Prêt à relever les défis de la forêt de Sherwood ?\n    \\nC'est à ${players[activePlayer ? 0 : 1].name} de commencer !`,\n    hidePopup: false,\n    buttonMessage: 'Règles du jeu',\n    hideButton: false\n  })\n\n  useEffect(() => { // Function to check if a player has won the game\n    if (players[0].life === 0 || players[1].life === 0) {\n      let popupCopy = JSON.parse(JSON.stringify(popupStates))\n      popupCopy.popupMessage = `${players[((players[0].life === 0) ? 1 : 0)].name} remporte la partie après que son adversaire ait perdu tous ses points`;\n      popupCopy.hidePopup = false\n      popupCopy.buttonMessage = 'Rejouer'\n      popupCopy.hideButton = false\n      setPopupStates(popupCopy)\n    }\n  }, [players]);\n\n  const handleClickedCard = (character) => {\n    \n    // Trigger the power of the traitor\n    if (round.clickedCard.length === 0 // If no card has been clicked before\n      && !includes(character.id, activeCard) // If the clicked card isn't visible\n      && character.id === 12 // If the clicked card is the traitor\n      && round.chosenCharacter === \"\") { // If no character has been chosen yet\n\n      setActiveCard(prev => ([...prev, character.id]));\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.clickedCard = [character.id]\n      roundCopy.clickedCharacter = character.name\n      setRound(roundCopy)\n      let playersCopy = JSON.parse(JSON.stringify(players))\n      playersCopy[activePlayer ? 0 : 1].life = players[activePlayer ? 0 : 1].life - 1\n      setPlayers(playersCopy)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a perdu une vie à cause du traitre\"]));\n    \n      // Trigger the power of the adjunct\n    } else if (round.chosenCharacter === \"Adjoint\" // If the clicked card is the adjunct\n    && !includes(character.id, activeCard)) { // If the clicked card isn't visible\n\n      if (round.clickedCard.length === 0) { // If no card has been clicked before\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard = [character.id]\n        roundCopy.clickedCharacter = character.name\n        setRound(roundCopy)\n      } else { // If a card has been clicked before\n        let charactersCopy = JSON.parse(JSON.stringify(characters))\n        let firstPosition = charactersCopy.map(function(e) { return e.id; }).indexOf(round.clickedCard[0])\n        let secondPosition = charactersCopy.map(function(e) { return e.id; }).indexOf(character.id)\n        let firstCharacter = charactersCopy[firstPosition]\n        let secondCharacter = charactersCopy[secondPosition]\n        charactersCopy[firstPosition] = secondCharacter\n        charactersCopy[secondPosition] = firstCharacter\n        setCharacters(charactersCopy)\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard = [roundCopy.clickedCard[0], character.id]\n        setRound(roundCopy)\n        resetRound(true)\n        setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a échangé deux cartes\"]))\n      }\n\n    // Trigger the power of Robin or the Sheriff\n    } else if ((round.chosenCharacter === \"Robin\" || round.chosenCharacter === \"Sheriff\")) { // If the chosen character is Robin or the Sheriff\n      \n      if (round.clickedCard.length === 0 || round.clickedCard.length === 1) { // If 0 or 1 card has been clicked before\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard.push(character.id)\n        roundCopy.clickedCharacter = character.name\n        setRound(roundCopy)\n      } else if (round.clickedCard.length === 2) { // If 2 cards have already been clicked\n        let firstColor = characters[characters.map(function(e) { return e.id; }).indexOf(round.clickedCard[0])].color\n        let secondColor = characters[characters.map(function(e) { return e.id; }).indexOf(round.clickedCard[1])].color\n        let thirdColor = characters[characters.map(function(e) { return e.id; }).indexOf(character.id)].color\n        let roundCopy = JSON.parse(JSON.stringify(round))\n        roundCopy.clickedCard.push(character.id)\n        roundCopy.clickedCharacter = character.name\n        setRound(roundCopy)\n\n          if(firstColor === secondColor && secondColor === thirdColor) { // If the color of the 3 cards is the same\n            activeCard.push(round.clickedCard[0], round.clickedCard[1], character.id)\n            setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name\n              + \" a réussi à démasquer \"\n              + (round.chosenCharacter === \"Robin\" ? \"le Shériff et ses adjoints\" : \"Robin et ses compagnons\")]));\n            let popupCopy = JSON.parse(JSON.stringify(popupStates))\n            popupCopy.popupMessage = players[(activePlayer ? 0 : 1)].name\n              + \" a réussi à démasquer \"\n              + (round.chosenCharacter === \"Robin\" ? \"le Shériff et ses adjoints\" : \"Robin et ses compagnons\")\n              + \" et remporte la partie !\";\n            popupCopy.hidePopup = false\n            popupCopy.buttonMessage = 'Rejouer'\n            popupCopy.hideButton = false\n            setPopupStates(popupCopy)\n          } else { // If the color of the 3 cards is not the same\n            let playersCopy = JSON.parse(JSON.stringify(players))\n            playersCopy[activePlayer ? 0 : 1].life = players[activePlayer ? 0 : 1].life - 1\n            setPlayers(playersCopy)\n            resetRound(true)\n            setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name\n              + \" n'a pas réussi à démasquer \"\n              + (round.chosenCharacter === \"Robin\" ? \"le Shériff et ses adjoints\" : \"Robin et ses compagnons\")\n              + \" et a perdu une vie\"]));\n          }\n      }\n\n    // Flip the chosen card if none has already been flipped\n    } else if (round.clickedCard.length === 0 // If no card has been clicked before\n      && !includes(character.id, activeCard)) { // If the clicked card isn't visible\n      setActiveCard(prev => ([...prev, character.id]));\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.clickedCard = [character.id]\n      roundCopy.clickedCharacter = character.name\n      setRound(roundCopy)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a retourné une carte\"]));\n    }\n\n    // Flip the card back after the witch power\n    if (includes(character.id, activeCard) // If the clicked card is visible\n    && round.chosenCharacter === \"Sorciere\" // If the chosen character is the witch\n    && includes(character.id, round.clickedCard)) { // If the clicked card has been already clicked\n      setActiveCard(activeCard.filter(element => element !== character.id));\n      resetRound(true)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a remis une carte face cachée\"]));\n    \n    // Flip the card back after the traitor power\n    } else if (includes(character.id, activeCard) // If the clicked card is visible\n    && character.id === 12) { // If the clicked card is the traitor\n      setActiveCard(activeCard.filter(element => element !== character.id));\n      resetRound(true)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a remis une carte face cachée\"]));\n      \n    // Flip the card back if the card is currently flipped\n    } else if (includes(character.id, activeCard) // If the clicked card is visible\n    && includes(character.id, round.clickedCard) ) { // If the clicked card has been clicked before\n      setActiveCard(activeCard.filter(element => element !== character.id));\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a remis une carte face cachée\"]));\n    \n    // Trigger the power of the witch\n    } else if (!includes(character.id, activeCard) // If the clicked card isn't visible\n    && round.chosenCharacter === \"Sorciere\" // If the chosen character is the witch\n    && !includes(round.clickedCard[0], activeCard)) { // If the clicked card isn't visible\n      setActiveCard(prev => ([...prev, character.id]));\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.clickedCard = [character.id]\n      roundCopy.clickedCharacter = character.name\n      setRound(roundCopy)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name\n        + \" a retourné une carte grâce à la sorcière\"]));\n\n    // Trigger the power of the monk\n    } else if (round.chosenCharacter === \"Moine\" // If the chosen character is the monk\n    && !includes(character.id, activeCard)) { // If the clicked card isn't active\n      setActiveCard(prev => ([...prev, character.id]));\n      resetRound(true)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name\n        + \" a retourné une carte grâce au moine\"]));\n    }\n  };\n\n  const handleClickedChoice = (choice) => {\n    \n    // Go to next player if the player skip\n    if (round.chosenCharacter === \"\" // If no character has been chosen before\n    && round.clickedCard.length !== 0 // If at least 1 card has been clicked before\n    && !includes(round.clickedCard[0], activeCard) // If the clicked card isn't visible\n    && choice.character === \"Passe\" // If the choice is to skip\n    && round.clickedCard[0] !== 12 // If the clicked card was not the traitor\n    && round.clickedCharacter !== \"Embobineur\") { // If the clicked card was not the liar\n      resetRound(true)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a passé son tour\"]));\n\n    // Go to next player if the player is Robin or Sheriff and skip\n    } else if (choice.character === \"Passe\" // If the choice is to skip\n    && (round.chosenCharacter === \"Robin\" || round.chosenCharacter === \"Sheriff\") // If the chosen character is Robin or the Sheriff\n    && round.chosenAnswer !== \"\") { // If no answer has been clicked\n      resetRound(true)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" a passé son tour\"]));\n    \n    // Choose a character\n    } else if (choice.character !== \"Passe\" // If the choice isn't to skip\n    && round.chosenCharacter === \"\" // If no character has been chosen before\n    && round.clickedCard.length !== 0 // If at least 1 card has been clicked before\n    && !includes(round.clickedCard[0], activeCard) ) { // If the clicked card isn't visible\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.chosenCharacter = choice.character\n      setRound(roundCopy)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" est \" + choice.character]));\n    }\n  }\n\n  // Function to enable a new round to play\n  const resetRound = (isNewPlayer) => {\n    setActivePlayer((isNewPlayer) ? !activePlayer : activePlayer)  \n    setRound({\n        player: activePlayer,\n        clickedCard: [],\n        clickedCharacter: \"\",\n        chosenCharacter: \"\",\n        chosenAnswer: \"\",\n      });\n  }\n\n  const handleClickedAnswer = (answer) => {\n\n    // A player answer to a chosen character\n    if (round.chosenAnswer === \"\" // If no answer has been clicked before\n    && round.clickedCard !== [] // If a card has been clicked before\n    && round.chosenCharacter !== \"\") { // If a character has been chosen before\n      let roundCopy = JSON.parse(JSON.stringify(round))\n      roundCopy.chosenAnswer = answer;\n      if (round.chosenCharacter === \"Adjoint\" || round.chosenCharacter === \"Robin\" || round.chosenCharacter === \"Sheriff\") {\n        roundCopy.clickedCard = []\n      }\n      setRound(roundCopy)\n      setHistory(prev => ([...prev, players[(!activePlayer ? 0 : 1)].name + \" répond : \" + answer]));\n    }\n\n    // If a player lies and is not believed, he loses a life\n    if(round.chosenCharacter !== round.clickedCharacter // If the chosen character and the clicked character are different\n      && round.chosenAnswer === \"\" // If no answer has been clicked before\n      && answer === \"Je t'accuse\" // If the answer is Je t'accuse\n      && round.chosenCharacter !== \"\") { // If a character has been chosen before\n      let playersCopy = JSON.parse(JSON.stringify(players))\n      playersCopy[activePlayer ? 0 : 1].life = players[activePlayer ? 0 : 1].life - 1\n      setPlayers(playersCopy)\n      resetRound(true)\n      setHistory(prev => ([...prev, players[(activePlayer ? 0 : 1)].name + \" perd une vie\"]));\n    \n    // If a player tells the truth but is not believed, it trigger his character's power and the other player loses a life\n    } else if (round.chosenCharacter === round.clickedCharacter // If the chosen character and the clicked character are the same\n      && round.chosenCharacter !== \"\"\n      && round.chosenAnswer === \"\"\n      && answer === \"Je t'accuse\") { // If the answer is Je t'accuse\n        let playersCopy = JSON.parse(JSON.stringify(players))\n        playersCopy[activePlayer ? 1 : 0].life = players[activePlayer ? 1 : 0].life - 1\n        setPlayers(playersCopy)\n        characterPower(round.chosenCharacter)\n        setHistory(prev => ([...prev, players[(!activePlayer ? 0 : 1)].name + \" perd une vie\"]));\n    \n    // If the active player is believed, it trigger his character's power\n    } else if (answer === \"Je te crois\") { // If the answer is Je te crois\n      characterPower(round.chosenCharacter)\n    }\n  }\n\n  // Trigger a character's power\n  const characterPower = (character) => {\n    switch (character) {\n      case 'Paysanne':\n        resetRound(true)\n        break\n      case 'Compagnon':\n        resetRound(false)\n        break\n      default:\n        return\n    }\n  }\n\n  // Function that enable a player to change his name\n  const onNameChange = (e, num) => {\n    let playersCopy = JSON.parse(JSON.stringify(players))\n    playersCopy[num].name = e\n    setPlayers(playersCopy)\n  }\n\n  // Function that hide or unhide the menu\n  const onMenuClick = () => {\n    setHideMenu(!hideMenu)\n  }\n\n  // Function that hide the popup\n  const onCrossClick = () => {\n    let popupCopy = JSON.parse(JSON.stringify(popupStates))\n    popupCopy.hidePopup = true\n    setPopupStates(popupCopy)\n  }\n\n  // Trigger the popup button function\n  const onButtonClick = () => {\n    switch (popupStates.buttonMessage) {\n      case 'Règles du jeu':\n        onRulesClick()\n        break\n      case 'Rejouer':\n        onReplayClick()\n        break\n      default:\n        return\n    }\n  }\n\n  // Function that reset the game\n  const onReplayClick = () => {\n    setActiveCard([]);\n    setActivePlayer(Math.floor(Math.random()*2) === 1 ? true : false);\n    setHistory([])\n    setRound({\n      player: activePlayer,\n      clickedCard: [],\n      clickedCharacter: \"\",\n      chosenCharacter: \"\",\n      chosenAnswer: \"\",\n    });\n    setPlayers([{\n      name: players[0].name, life: 2 },\n    { name: players[1].name, life: 2\n    }])\n    setPopupStates({\n      popupMessage: `Bienvenue compagnon ! Prêt à relever les défis de la forêt de Sherwood ?\n      \\nC'est à ${players[activePlayer ? 0 : 1].name} de commencer !`,\n      hidePopup: false,\n      buttonMessage: 'Règles du jeu',\n      hideButton: false\n    })\n    setCharacters(shuffle(charactersArray));\n  }\n\n  // Function that display the rules popup\n  const onRulesClick = () => {\n    let popupCopy = JSON.parse(JSON.stringify(popupStates))\n    popupCopy.popupMessage = rules\n    popupCopy.hidePopup = false\n    popupCopy.hideButton = true\n    setPopupStates(popupCopy)\n  }\n\n  // Function that display the history popup\n  const onHistoryClick = () => {\n    let popupCopy = JSON.parse(JSON.stringify(popupStates))\n    popupCopy.popupMessage = history.join(\"\\n\")\n    popupCopy.hidePopup = false\n    popupCopy.hideButton = true\n    setPopupStates(popupCopy)\n  }\n\n  // Function that display the powers popup\n  const onPowersClick = () => {\n    let popupCopy = JSON.parse(JSON.stringify(popupStates))\n    popupCopy.popupMessage = powers.join(\"\\n\")\n    popupCopy.hidePopup = false\n    popupCopy.hideButton = true\n    setPopupStates(popupCopy)\n  }\n\n  return (\n    <div className=\"app\">\n      <Menu\n        hideMenu={hideMenu}\n        onMenuClick={onMenuClick}\n        onRulesClick={onRulesClick}\n        onHistoryClick={onHistoryClick}\n        onReplayClick={onReplayClick}\n        onPowersClick={onPowersClick}\n      />\n      <Popup\n        popupStates={popupStates}\n        onCrossClick={onCrossClick}\n        onButtonClick={onButtonClick}\n      />\n      <Players\n        players={players}\n        player={true}\n        onChange={onNameChange}\n        onMenuClick={onMenuClick}\n      />\n      <Choices\n        onChoiceClick={handleClickedChoice}\n        onAnswerClick={handleClickedAnswer}\n        activePlayer={activePlayer}\n        player={true}\n        round={round}\n      />\n      <Board\n        handleClickedCard={handleClickedCard}\n        characters={characters}\n        activeCard={activeCard}\n        activePlayer={activePlayer}\n        round={round}\n      />\n      <Choices\n        onChoiceClick={handleClickedChoice}\n        onAnswerClick={handleClickedAnswer}\n        activePlayer={!activePlayer}\n        player={false}\n        round={round}\n      />\n      <Players\n        players={players}\n        player={false}\n        onChange={onNameChange}\n        onMenuClick={onMenuClick}\n      />\n    </div>\n  );\n};\n\nexport default App;","const rules = `INTRODUCTION\r\nDans la forêt de Sherwood, la lutte entre les compagnons de Robin des Bois et les adjoints du shérif de Nottingham fait rage. Chaque camp cherche à infiltrer le clan adverse pour enfin dominer la région. En tant que simple citoyen, vous êtes coincé entre ces deux factions. Vous sauverez votre peau en dénonçant Robin et ses compagnons, ou en démasquant le shérif et ses adjoints, infiltrés dans le campement de Robin.\r\n\\nBUT DU JEU\r\nLe premier joueur à démasquer les 3 cartes d’un camp (Le Sheriff et ses adjoint ou Robin et ses compagnons) remporte la partie. Un joueur remporte aussi la partie si l’autre joueur n’a plus de vies. Chaque joueur commence avec 2 vies.\r\n\\nDÉROULEMENT\r\nVoici comment se déroule le tour d’un joueur :\r\n•\tVous retournez une carte face cachée sans que l’autre joueur ne la voit puis vous la reposez. Attention : Si vous pioché le traitre, vous perdez une vie et votre tour s’arrête.\r\n•\tVous prenez ensuite la décision de passer votre tour, d’annoncer le personnage que vous venez de consulter ou bien d’en annoncer un autre et dans ce cas, vous êtes un vilain menteur. Attention : Si vous avez pioché l’embobineur, vous êtes obligé de mentir !\r\n•\tLe joueur adverse peut choisir de vous croire ou vous accuser de mentir.\r\n•\tS’il ne vous croit pas et que vous mentez, vous perdez une vie, autrement c’est lui qui perd une vie et vous utilisez votre pouvoir.\r\n•\tS’il vous croit, vous utilisez le pouvoir du personnage que vous avez annoncé :\r\no Robin : Le pouvoir de Robin est de sélectionner 3 cartes face cachées. Si derrière ces cartes se cachent le Sherif et ses 2 adjoints, vous remportez la partie, autrement vous perdez une vie. Lorsque vous êtes Robin, vous pouvez aussi choisir de ne pas démasquer et de passer votre tour.\r\no Compagnon : Lorsque vous déclenchez le pouvoir du compagnon, vous rejouez.\r\no Sheriff : Le pouvoir du Sheriff est de sélectionner 3 cartes face cachées. Si derrière ces cartes se cachent Robin et ses 2 compagnons, vous remportez la partie, autrement vous perdez une vie. Lorsque vous êtes le Sheriff, vous pouvez aussi choisir de ne pas démasquer et de passer votre tour.\r\no Adjoint : Lorsque vous déclenchez le pouvoir de l’adjoint, vous sélectionnez deux cartes face cachée qui échangent de place.\r\no Paysanne : Il ne se passe rien.\r\no Moine : Vous pouvez choisir une carte face cachée qui sera visible jusqu’à la fin de la partie.\r\no Sorcière : Vous pouvez consulter une carte du plateau sans que l’autre joueur ne la voit.\r\n•\tUne fois que vous avez déclenché un pouvoir, c’est au tour de l’autre de joueur.`\r\n\r\nexport default rules;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}